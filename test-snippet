package com.demo.springtest.controller;

import com.demo.springtest.models.UserAuth;
import com.demo.springtest.services.AuthService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;


import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.mockito.Mockito.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

//@WebMvcTest(AuthController.class)
/*@SpringBootTest
@RunWith(SpringJUnit4ClassRunner.class)
@AutoConfigureMockMvc
@ActiveProfiles("test")*/
@ExtendWith(MockitoExtension.class)
public class AuthControllerTest {

    /*@Value("${custom.config.total-endorsements}")
    private Integer totalEndorsementsAllowed;*/

//    @Autowired
    private MockMvc mockMvc;

    @Mock
    private AuthService authService;

    @InjectMocks
    private AuthController authController;

    private static String jsonToString(final Object obj) {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            return mapper.writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(authController).build();
    }


    @Test
    public void testCreateUserAccountSuccess() throws Exception {
        UserAuth userAuth = UserAuth.builder().id(123).userEmail("abc@abc.com").userPassword("123456").build();
        when(authService.createUserAccount(any(UserAuth.class))).thenReturn(true);
        MvcResult mvcResult = mockMvc.perform(post("/api/v1/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonToString(userAuth)))
                .andExpect(status().isCreated()).andDo(MockMvcResultHandlers.print()).andReturn();

        Assert.assertEquals(Boolean.TRUE, Boolean.valueOf(mvcResult.getResponse().getContentAsString()));
        verify(authService, times(1)).createUserAccount(any(UserAuth.class));
        verifyNoMoreInteractions(authService);
    }

}

















package com.demo.springtest.controller;

import com.demo.springtest.models.UserAuth;
import com.demo.springtest.services.AuthService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;


import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.mockito.Mockito.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(AuthController.class)
@RunWith(SpringJUnit4ClassRunner.class)
/*@SpringBootTest
@RunWith(SpringJUnit4ClassRunner.class)
@AutoConfigureMockMvc
@ActiveProfiles("test")*/
//@ExtendWith(MockitoExtension.class)
public class AuthControllerTest {

    /*@Value("${custom.config.total-endorsements}")
    private Integer totalEndorsementsAllowed;*/

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AuthService authService;

    private static String jsonToString(final Object obj) {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            return mapper.writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    @Test
    public void testCreateUserAccountSuccess() throws Exception {
        UserAuth userAuth = UserAuth.builder().id(123).userEmail("abc@abc.com").userPassword("123456").build();
        when(authService.createUserAccount(any(UserAuth.class))).thenReturn(true);
        MvcResult mvcResult = mockMvc.perform(post("/api/v1/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonToString(userAuth)))
                .andExpect(status().isCreated()).andDo(MockMvcResultHandlers.print()).andReturn();

        Assert.assertEquals(Boolean.TRUE, Boolean.valueOf(mvcResult.getResponse().getContentAsString()));
        verify(authService, times(1)).createUserAccount(any(UserAuth.class));
        verifyNoMoreInteractions(authService);
    }

}


















@SpringBootTest
@RunWith(SpringJUnit4ClassRunner.class)
@AutoConfigureMockMvc
@ActiveProfiles("test")
public class AuthControllerTest {

    /*@Value("${custom.config.total-endorsements}")
    private Integer totalEndorsementsAllowed;*/

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AuthService authService;

    private static String jsonToString(final Object obj) {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            return mapper.writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    @Test
    public void testCreateUserAccountSuccess() throws Exception {
        UserAuth userAuth = UserAuth.builder().id(123).userEmail("abc@abc.com").userPassword("123456").build();
        when(authService.createUserAccount(any(UserAuth.class))).thenReturn(true);
        MvcResult mvcResult = mockMvc.perform(post("/api/v1/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonToString(userAuth)))
                .andExpect(status().isCreated()).andDo(MockMvcResultHandlers.print()).andReturn();

        Assert.assertEquals(Boolean.TRUE, Boolean.valueOf(mvcResult.getResponse().getContentAsString()));
        verify(authService, times(1)).createUserAccount(any(UserAuth.class));
        verifyNoMoreInteractions(authService);
    }

}
